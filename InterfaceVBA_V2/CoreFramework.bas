Attribute VB_Name = "CoreFramework"
' **Purpose**: Core framework providing all fundamental types, error handling, and utilities
' **CLAUDE.md Compliance**: Maintains 32/64-bit compatibility, preserves all legacy functionality
Option Explicit

' ===================================================================
' DATA TYPES (CLAUDE.md: Document all Type definitions)
' ===================================================================

' **Purpose**: Complete enquiry information structure for PCS system
' **CLAUDE.md Compliance**: Maintains all legacy enquiry fields for compatibility
Public Type EnquiryData
    ' **Purpose**: Unique enquiry identifier in E00001 format
    ' **Dependencies**: Generated by DataManager.GetNextEnquiryNumber()
    EnquiryNumber As String

    ' **Purpose**: Customer company name for business identification
    ' **Side Effects**: Used in search database, customer file creation
    CustomerName As String

    ' **Purpose**: Primary contact person at customer company
    ContactPerson As String

    ' **Purpose**: Customer company phone number
    CompanyPhone As String

    ' **Purpose**: Customer company fax number (legacy compatibility)
    CompanyFax As String

    ' **Purpose**: Customer email address for communication
    Email As String

    ' **Purpose**: Description of component being enquired about
    ' **Dependencies**: Used in search keywords, quote generation
    ComponentDescription As String

    ' **Purpose**: Internal component code if available
    ComponentCode As String

    ' **Purpose**: Material grade specification for component
    MaterialGrade As String

    ' **Purpose**: Quantity of components requested
    ' **Errors**: Must be > 0, validated by BusinessController.ValidateEnquiryData()
    Quantity As Long

    ' **Purpose**: Date enquiry was created
    ' **Side Effects**: Used for search sorting, archival decisions
    DateCreated As Date

    ' **Purpose**: Full path to enquiry Excel file
    ' **Dependencies**: Generated by DataManager file operations
    FilePath As String

    ' **Purpose**: Searchable keywords for enquiry
    ' **Dependencies**: Used by SearchManager for record finding
    SearchKeywords As String
End Type

' **Purpose**: Complete quote information structure for PCS system
' **CLAUDE.md Compliance**: Maintains all legacy quote fields for compatibility
Public Type QuoteData
    ' **Purpose**: Unique quote identifier in Q00001 format
    ' **Dependencies**: Generated by DataManager.GetNextQuoteNumber()
    QuoteNumber As String

    ' **Purpose**: Reference to source enquiry
    ' **Dependencies**: Links to EnquiryData.EnquiryNumber
    EnquiryNumber As String

    ' **Purpose**: Customer company name (inherited from enquiry)
    CustomerName As String

    ' **Purpose**: Component description (inherited from enquiry)
    ComponentDescription As String

    ' **Purpose**: Component code (inherited from enquiry)
    ComponentCode As String

    ' **Purpose**: Material grade (inherited from enquiry)
    MaterialGrade As String

    ' **Purpose**: Quantity being quoted (inherited from enquiry)
    Quantity As Long

    ' **Purpose**: Price per unit in local currency
    ' **Errors**: Must be > 0, validated by BusinessController.ValidateQuoteData()
    UnitPrice As Currency

    ' **Purpose**: Total quote value (UnitPrice * Quantity)
    ' **Side Effects**: Used for job costing, customer invoicing
    TotalPrice As Currency

    ' **Purpose**: Manufacturing lead time description
    LeadTime As String

    ' **Purpose**: Quote expiration date
    ' **Side Effects**: Used for quote validity checking
    ValidUntil As Date

    ' **Purpose**: Date quote was created
    DateCreated As Date

    ' **Purpose**: Full path to quote Excel file
    ' **Dependencies**: Generated by DataManager file operations
    FilePath As String

    ' **Purpose**: Quote status (Pending, Accepted, Rejected)
    Status As String
End Type

' **Purpose**: Complete job information structure for PCS system
' **CLAUDE.md Compliance**: Maintains all legacy job fields for compatibility
Public Type JobData
    ' **Purpose**: Unique job identifier in J00001 format
    ' **Dependencies**: Generated by DataManager.GetNextJobNumber()
    JobNumber As String

    ' **Purpose**: Reference to source quote
    ' **Dependencies**: Links to QuoteData.QuoteNumber
    QuoteNumber As String

    ' **Purpose**: Customer company name (inherited from quote)
    CustomerName As String

    ' **Purpose**: Component description (inherited from quote)
    ComponentDescription As String

    ' **Purpose**: Component code (inherited from quote)
    ComponentCode As String

    ' **Purpose**: Material grade (inherited from quote)
    MaterialGrade As String

    ' **Purpose**: Quantity to manufacture (inherited from quote)
    Quantity As Long

    ' **Purpose**: Customer requested due date
    DueDate As Date

    ' **Purpose**: Workshop internal due date
    ' **Side Effects**: Used for production scheduling
    WorkshopDueDate As Date

    ' **Purpose**: Customer delivery due date
    CustomerDueDate As Date

    ' **Purpose**: Job order value (inherited from quote)
    OrderValue As Currency

    ' **Purpose**: Date job was created
    DateCreated As Date

    ' **Purpose**: Full path to job Excel file
    ' **Dependencies**: Generated by DataManager file operations
    FilePath As String

    ' **Purpose**: Current job status (Active, On Hold, Completed, Cancelled)
    Status As String

    ' **Purpose**: Operator assigned to this job
    ' **Side Effects**: Used for WIP reporting, resource allocation
    AssignedOperator As String

    ' **Purpose**: Manufacturing operations required
    Operations As String

    ' **Purpose**: File paths to job pictures/drawings
    Pictures As String

    ' **Purpose**: Additional job notes and comments
    Notes As String
End Type

' **Purpose**: Contract template information structure for PCS system
' **CLAUDE.md Compliance**: Maintains all legacy contract fields for compatibility
Public Type ContractData
    ' **Purpose**: Contract template name identifier
    ContractName As String

    ' **Purpose**: Customer this contract template applies to
    CustomerName As String

    ' **Purpose**: Standard component description for this contract
    ComponentDescription As String

    ' **Purpose**: Standard operations for this contract type
    StandardOperations As String

    ' **Purpose**: Standard lead time for this contract
    LeadTime As String

    ' **Purpose**: Full path to contract template Excel file
    ' **Dependencies**: Generated by DataManager file operations
    FilePath As String

    ' **Purpose**: Date contract template was created
    DateCreated As Date

    ' **Purpose**: Date contract was last used for job creation
    ' **Side Effects**: Used for contract usage tracking
    LastUsed As Date
End Type

' **Purpose**: Search record structure for database operations
' **CLAUDE.md Compliance**: Maintains all search functionality requirements
Public Type SearchRecord
    ' **Purpose**: Type of record (Enquiry, Quote, Job, Contract)
    ' **Dependencies**: Must match RecordType enum values
    RecordType As String

    ' **Purpose**: Record number (E00001, Q00001, J00001, etc.)
    RecordNumber As String

    ' **Purpose**: Customer name for this record
    CustomerName As String

    ' **Purpose**: Description/component for this record
    Description As String

    ' **Purpose**: Date record was created
    ' **Side Effects**: Used for search result sorting
    DateCreated As Date

    ' **Purpose**: Full file path to record Excel file
    FilePath As String

    ' **Purpose**: Searchable keywords for this record
    ' **Dependencies**: Used by SearchManager search algorithms
    Keywords As String
End Type

' **Purpose**: System configuration structure
' **CLAUDE.md Compliance**: New structure for system management
Public Type SystemConfig
    ' **Purpose**: Root directory path for PCS system
    RootPath As String

    ' **Purpose**: Current user information
    CurrentUser As String

    ' **Purpose**: Excel version compatibility mode
    ExcelVersion As String

    ' **Purpose**: System initialization status
    IsInitialized As Boolean

    ' **Purpose**: Last system validation timestamp
    LastValidated As Date
End Type

' ===================================================================
' ENUMS (CLAUDE.md: Document all enumeration values)
' ===================================================================

' **Purpose**: Record type enumeration for PCS system
Public Enum RecordType
    rtEnquiry = 1    ' **Purpose**: Enquiry records
    rtQuote = 2      ' **Purpose**: Quote records
    rtJob = 3        ' **Purpose**: Job records
    rtContract = 4   ' **Purpose**: Contract templates
End Enum

' **Purpose**: Job status enumeration for workflow management
Public Enum JobStatus
    jsActive = 1     ' **Purpose**: Job is currently active
    jsOnHold = 2     ' **Purpose**: Job is temporarily on hold
    jsCompleted = 3  ' **Purpose**: Job has been completed
    jsCancelled = 4  ' **Purpose**: Job has been cancelled
End Enum

' ===================================================================
' ERROR HANDLING (CLAUDE.md: Document recovery steps)
' ===================================================================

' **Purpose**: Standard error codes for PCS system
' **CLAUDE.md Compliance**: Maintains all error handling patterns
Public Const ERR_FILE_NOT_FOUND As Long = 53
Public Const ERR_PATH_NOT_FOUND As Long = 76
Public Const ERR_PERMISSION_DENIED As Long = 70
Public Const ERR_DISK_FULL As Long = 61
Public Const ERR_EXCEL_NOT_AVAILABLE As Long = 429
Public Const ERR_WORKBOOK_OPEN As Long = 1004
Public Const ERR_INVALID_REFERENCE As Long = 1004

' **Purpose**: Centralized error logging with file output
' **Parameters**:
'   - ErrorNumber (Long): The error number that occurred
'   - ErrorDescription (String): Description of the error
'   - ProcedureName (String): Name of procedure where error occurred
'   - ModuleName (String, Optional): Name of module where error occurred
' **Returns**: None (Subroutine)
' **Dependencies**: File system access for error logging
' **Side Effects**: Creates/appends to error_log.txt file
' **Errors**: Displays critical error message if logging fails
' **CLAUDE.md Compliance**: Centralized error management with logging
Public Sub LogError(ByVal ErrorNumber As Long, ByVal ErrorDescription As String, ByVal ProcedureName As String, Optional ByVal ModuleName As String = "")
    Dim ErrorMsg As String
    Dim LogPath As String
    Dim FileNum As Integer

    On Error GoTo ErrorLogging_Error

    ErrorMsg = Format(Now, "yyyy-mm-dd hh:mm:ss") & " - "
    If ModuleName <> "" Then ErrorMsg = ErrorMsg & ModuleName & "."
    ErrorMsg = ErrorMsg & ProcedureName & " - Error " & ErrorNumber & ": " & ErrorDescription

    LogPath = ThisWorkbook.Path & "\error_log.txt"

    FileNum = FreeFile
    Open LogPath For Append As #FileNum
    Print #FileNum, ErrorMsg
    Close #FileNum

    Exit Sub

ErrorLogging_Error:
    MsgBox "Critical Error: Unable to log error to file." & vbCrLf & _
           "Original Error: " & ErrorNumber & " - " & ErrorDescription, vbCritical
End Sub

' **Purpose**: Handle standard errors with user-friendly messages and logging
' **Parameters**:
'   - ErrorNumber (Long): The error number to handle
'   - ProcedureName (String): Name of procedure where error occurred
'   - ModuleName (String, Optional): Name of module where error occurred
' **Returns**: Boolean - True if error was handled, False if unrecognized
' **Dependencies**: LogError for error logging, MsgBox for user notification
' **Side Effects**: Logs error to file, displays user message
' **Errors**: Returns False for unrecognized error numbers
' **CLAUDE.md Compliance**: Standardized error handling with recovery guidance
Public Function HandleStandardErrors(ByVal ErrorNumber As Long, ByVal ProcedureName As String, Optional ByVal ModuleName As String = "") As Boolean
    Dim UserMsg As String

    Select Case ErrorNumber
        Case ERR_FILE_NOT_FOUND
            UserMsg = "File not found. Please check the file path and try again."
        Case ERR_PATH_NOT_FOUND
            UserMsg = "Directory not found. Please verify the directory structure."
        Case ERR_PERMISSION_DENIED
            UserMsg = "Access denied. Please check file permissions or close any open files."
        Case ERR_DISK_FULL
            UserMsg = "Disk full. Please free up space and try again."
        Case ERR_EXCEL_NOT_AVAILABLE
            UserMsg = "Excel application is not available. Please ensure Excel is properly installed."
        Case ERR_WORKBOOK_OPEN
            UserMsg = "Unable to open workbook. File may be in use or corrupted."
        Case Else
            HandleStandardErrors = False
            Exit Function
    End Select

    LogError ErrorNumber, Err.Description, ProcedureName, ModuleName
    MsgBox UserMsg & vbCrLf & vbCrLf & "Technical Details: Error " & ErrorNumber, vbExclamation
    HandleStandardErrors = True
End Function

' **Purpose**: Clear the current error state
' **Parameters**: None
' **Returns**: None (Subroutine)
' **Dependencies**: VBA Err object
' **Side Effects**: Clears Err.Number and Err.Description
' **Errors**: None
Public Sub ClearError()
    Err.Clear
End Sub

' **Purpose**: Get formatted string of last error information
' **Parameters**: None
' **Returns**: String - Formatted error information
' **Dependencies**: VBA Err object
' **Side Effects**: None
' **Errors**: Returns empty string if no error
Public Function GetLastErrorInfo() As String
    If Err.Number <> 0 Then
        GetLastErrorInfo = "Error " & Err.Number & ": " & Err.Description
    Else
        GetLastErrorInfo = ""
    End If
End Function

' ===================================================================
' SYSTEM UTILITIES (CLAUDE.md: 32/64-bit compatibility)
' ===================================================================

' **Purpose**: GetUserName API declaration with 32/64-bit compatibility
' **CLAUDE.md Compliance**: Full compatibility for all Excel versions
#If Win64 Then
    Private Declare PtrSafe Function GetUserName Lib "advapi32.dll" Alias "GetUserNameA" _
                                                    (ByVal lpBuffer As String, _
                                                    nSize As LongPtr) As Long
#Else
    Private Declare Function GetUserName Lib "advapi32.dll" Alias "GetUserNameA" _
                                            (ByVal lpBuffer As String, _
                                            nSize As Long) As Long
#End If

' **Purpose**: Get current Windows username (Excel 2010+ compatible)
' **Parameters**: None
' **Returns**: String - Current Windows username, empty string if error
' **Dependencies**: Windows API GetUserNameA from advapi32.dll
' **Side Effects**: None
' **Errors**: Returns empty string on API failure, logs error via LogError()
' **CLAUDE.md Compliance**: Replaces legacy GetUserNameEx.bas and GetUserName64.bas, works with modern Excel
Public Function GetCurrentUser() As String
    Dim lpBuff As String * 25
    Dim ret As Long
    #If Win64 Then
        Dim nSize As LongPtr
    #Else
        Dim nSize As Long
    #End If

    On Error GoTo Error_Handler

    nSize = 25
    ret = GetUserName(lpBuff, nSize)

    If ret <> 0 Then
        GetCurrentUser = Left(lpBuff, InStr(lpBuff, Chr(0)) - 1)
    Else
        GetCurrentUser = ""
    End If

    Exit Function

Error_Handler:
    LogError Err.Number, Err.Description, "GetCurrentUser", "CoreFramework"
    GetCurrentUser = ""
End Function

' **Purpose**: Validate all system requirements for PCS operation
' **Parameters**: None
' **Returns**: Boolean - True if all requirements met, False if issues found
' **Dependencies**: Excel application object, file system access
' **Side Effects**: Logs validation results to error log
' **Errors**: Returns False on validation failure, logs specific issues
' **CLAUDE.md Compliance**: Replaces legacy Check_Dir.bas functionality
Public Function ValidateSystemRequirements() As Boolean
    Dim ExcelVersion As String
    Dim UserName As String
    Dim RootPath As String

    On Error GoTo Error_Handler

    ' Check Excel version compatibility
    ExcelVersion = Application.Version
    If Val(ExcelVersion) < 12 Then
        LogError 0, "Excel version " & ExcelVersion & " may not be fully compatible", "ValidateSystemRequirements", "CoreFramework"
    End If

    ' Check user authentication
    UserName = GetCurrentUser()
    If UserName = "" Then
        LogError 0, "Unable to determine current user", "ValidateSystemRequirements", "CoreFramework"
        ValidateSystemRequirements = False
        Exit Function
    End If

    ' Check root path availability
    RootPath = ThisWorkbook.Path
    If RootPath = "" Then
        LogError ERR_PATH_NOT_FOUND, "Unable to determine workbook path", "ValidateSystemRequirements", "CoreFramework"
        ValidateSystemRequirements = False
        Exit Function
    End If

    ValidateSystemRequirements = True
    Exit Function

Error_Handler:
    LogError Err.Number, Err.Description, "ValidateSystemRequirements", "CoreFramework"
    ValidateSystemRequirements = False
End Function

' **Purpose**: Clean filename by removing invalid characters for file system
' **Parameters**:
'   - FileName (String): Original filename to clean
' **Returns**: String - Cleaned filename safe for file system use
' **Dependencies**: None
' **Side Effects**: None
' **Errors**: Returns empty string if input is empty
' **CLAUDE.md Compliance**: Enhanced version of legacy RemoveCharacters.bas
Public Function CleanFileName(ByVal FileName As String) As String
    Dim InvalidChars As String
    Dim i As Integer
    Dim CleanName As String

    If FileName = "" Then
        CleanFileName = ""
        Exit Function
    End If

    ' Characters not allowed in Windows filenames
    InvalidChars = "<>:""/\|?*"
    CleanName = FileName

    ' Remove invalid characters
    For i = 1 To Len(InvalidChars)
        CleanName = Replace(CleanName, Mid(InvalidChars, i, 1), "")
    Next i

    ' Remove leading/trailing spaces
    CleanName = Trim(CleanName)

    ' Ensure filename is not empty after cleaning
    If CleanName = "" Then
        CleanName = "Untitled"
    End If

    CleanFileName = CleanName
End Function

' **Purpose**: Remove invalid characters from string for data processing
' **Parameters**:
'   - InputString (String): String to process
' **Returns**: String - String with invalid characters removed
' **Dependencies**: None
' **Side Effects**: None
' **Errors**: Returns empty string if input is empty
' **CLAUDE.md Compliance**: Replaces legacy RemoveCharacters.bas Remove_Characters function
Public Function RemoveInvalidCharacters(ByVal InputString As String) As String
    Dim i As Integer
    Dim Result As String

    If InputString = "" Then
        RemoveInvalidCharacters = ""
        Exit Function
    End If

    Result = InputString

    ' Remove problematic characters for data processing
    For i = 1 To Len(Result)
        If Mid(Result, i, 1) = "/" Or Mid(Result, i, 1) = ":" Or Mid(Result, i, 1) = " " Then
            Result = Mid(Result, 1, i - 1) & Mid(Result, i + 1, Len(Result) - i)
            i = i - 1 ' Adjust index after character removal
        End If
    Next i

    RemoveInvalidCharacters = Result
End Function

' **Purpose**: Format text for display by converting underscores and case changes to spaces
' **Parameters**:
'   - InputString (String): String to format for display
' **Returns**: String - Formatted string with improved readability
' **Dependencies**: None
' **Side Effects**: None
' **Errors**: Returns empty string if input is empty
' **CLAUDE.md Compliance**: Enhanced version of legacy RemoveCharacters.bas Insert_Characters function
Public Function FormatDisplayText(ByVal InputString As String) As String
    Dim i As Integer
    Dim Result As String
    Dim StringLength As Integer

    If InputString = "" Then
        FormatDisplayText = ""
        Exit Function
    End If

    Result = InputString
    StringLength = Len(Result)
    i = 2

    ' Process string from second character to end
    Do While i <= StringLength
        If Mid(Result, i, 1) = "_" Then
            ' Replace underscore with space
            Result = Mid(Result, 1, i - 1) & " " & Mid(Result, i + 1, Len(Result) - i)
            i = i + 1
            StringLength = Len(Result)
        ElseIf UCase(Mid(Result, i, 1)) = Mid(Result, i, 1) And _
               LCase(Mid(Result, i - 1, 1)) = Mid(Result, i - 1, 1) Then
            ' Insert space before uppercase letter following lowercase
            Result = Mid(Result, 1, i - 1) & " " & Mid(Result, i, Len(Result) - i + 1)
            StringLength = StringLength + 1
            i = i + 1
        End If
        i = i + 1
    Loop

    ' Remove "Component " prefix if present
    If InStr(1, Result, "Component ", vbTextCompare) = 1 Then
        Result = Mid(Result, Len("Component ") + 1)
    End If

    FormatDisplayText = Trim(Result)
End Function

' **Purpose**: Get system configuration information
' **Parameters**: None
' **Returns**: SystemConfig - Current system configuration
' **Dependencies**: GetCurrentUser, Application object, ThisWorkbook
' **Side Effects**: None
' **Errors**: Returns default values on error, logs issues
Public Function GetSystemConfig() As SystemConfig
    Dim Config As SystemConfig

    On Error GoTo Error_Handler

    With Config
        .RootPath = ThisWorkbook.Path
        .CurrentUser = GetCurrentUser()
        .ExcelVersion = Application.Version
        .IsInitialized = True
        .LastValidated = Now
    End With

    GetSystemConfig = Config
    Exit Function

Error_Handler:
    LogError Err.Number, Err.Description, "GetSystemConfig", "CoreFramework"
    ' Return default configuration
    With Config
        .RootPath = ""
        .CurrentUser = ""
        .ExcelVersion = ""
        .IsInitialized = False
        .LastValidated = Now
    End With
    GetSystemConfig = Config
End Function